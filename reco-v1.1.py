# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'reco-v1.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

# 作者：买旭旭不用券

import traceback

import PIL.ImageOps
from PyQt5.Qt import *
from PyQt5 import QtCore, QtGui, QtWidgets
from test import *
import matplotlib.pyplot as plt
from PIL import Image, ImageGrab
from pytorch_lightning import Trainer

ckp_path = r"D:\A文档\A学习用资料\research\毕设\实验结果\res50-adadelta\epoch=93-step=141093-val_ExpRate=0.4447.ckpt"


class Canvas(QLabel):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        canvas = QPixmap(1200, 800)
        canvas.fill(QColor('white'))
        self.setPixmap(canvas)

        self.last_x, self.last_y = None, None
        self.pen_color = QColor('#000')

    def clear_all(self):
        canvas = QPixmap(1200, 800)
        canvas.fill(QColor('white'))
        self.setPixmap(canvas)

    def set_pen_color(self, c):
        self.pen_color = QColor(c)

    def mouseReleaseEvent(self, *args, **kwargs):
        """
        松开鼠标事件
        """
        self.last_x, self.last_y = None, None

    def mouseMoveEvent(self, e):
        """
        移动鼠标事件
        """
        if self.last_x is None:
            self.last_x = e.x()
            self.last_y = e.y()
            return

        painter = QPainter(self.pixmap())
        pen = painter.pen()
        pen.setWidth(4)
        pen.setColor(self.pen_color)
        painter.setPen(pen)
        painter.drawLine(self.last_x, self.last_y, e.x(), e.y())
        painter.end()
        self.update()

        # update the origin for next time
        self.last_x = e.x()
        self.last_y = e.y()


class Ui_Dialog(object):
    def setupUi(self, Dialog):
        self.dialog = Dialog
        self.error_flag = False
        Dialog.setObjectName("Dialog")
        Dialog.resize(1700, 900)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(Dialog.sizePolicy().hasHeightForWidth())
        Dialog.setSizePolicy(sizePolicy)
        Dialog.setSizeGripEnabled(False)
        Dialog.setModal(False)
        self.widget = QtWidgets.QWidget(Dialog)
        self.widget.setGeometry(QtCore.QRect(240, 70, 1301, 331))
        self.widget.setObjectName("widget")
        self.label = QtWidgets.QLabel(self.widget)
        self.label.setGeometry(QtCore.QRect(500, 20, 261, 281))
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label.sizePolicy().hasHeightForWidth())
        self.label.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(19)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.label_canvas = QtWidgets.QLabel(self.widget)
        self.label_canvas.setGeometry(QtCore.QRect(100, 10, 1071, 311))
        font = QtGui.QFont()
        font.setPointSize(22)
        self.label_canvas.setFont(font)
        self.label_canvas.setAlignment(QtCore.Qt.AlignCenter)
        self.label_canvas.setObjectName("label_canvas")
        self.label_canvas.setHidden(True)
        self.pushButton = QtWidgets.QPushButton(Dialog)
        self.pushButton.setGeometry(QtCore.QRect(680, 410, 93, 28))
        self.pushButton.setObjectName("pushButton")
        self.label_2 = QtWidgets.QLabel(Dialog)
        self.label_2.setGeometry(QtCore.QRect(450, 450, 821, 91))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.label_2.setFont(font)
        self.label_2.setAlignment(QtCore.Qt.AlignCenter)
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(Dialog)
        self.label_3.setGeometry(QtCore.QRect(610, 580, 311, 271))
        self.label_3.setAlignment(QtCore.Qt.AlignCenter)
        self.label_3.setObjectName("label_3")
        self.pushButton_2 = QtWidgets.QPushButton(Dialog)
        self.pushButton_2.setGeometry(QtCore.QRect(810, 540, 93, 28))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(Dialog)
        self.pushButton_3.setGeometry(QtCore.QRect(810, 410, 93, 28))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_4 = QtWidgets.QPushButton(Dialog)
        self.pushButton_4.setGeometry(QtCore.QRect(930, 410, 93, 28))
        self.pushButton_4.setObjectName("pushButton_4")
        self.canvas = Canvas(self.label_canvas)

        self.retranslateUi(Dialog)
        self.pushButton.clicked.connect(self.on_btn_open_clicked)
        self.pushButton_2.clicked.connect(self.copyText)
        self.pushButton_3.clicked.connect(self.trans_function)
        self.pushButton_4.clicked.connect(self.capture)
        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "手写公式识别系统"))
        self.label.setText(_translate("Dialog", "请选择一个图片"))
        self.label_canvas.setText(_translate("Dialog", "请在此绘制公式"))
        self.pushButton.setText(_translate("Dialog", "打开文件"))
        self.label_2.setText(_translate("Dialog", "此处显示Latex标签"))
        self.label_3.setText(_translate("Dialog", "此处将显示公式图片"))
        self.pushButton_2.setText(_translate("Dialog", "复制标签"))
        self.pushButton_3.setText(_translate("Dialog", "开始绘制"))
        self.pushButton_4.setText(_translate("Dialog", "绘制完成"))

    def on_btn_open_clicked(self, checked):
        self.label.setHidden(False)
        self.label_canvas.setHidden(True)
        self.filename = QFileDialog.getOpenFileName(self.dialog, "OpenFile", ".",
                                                    "Image Files(*.jpg *.jpeg *.png *.bmp)")[0]
        # print(self.filename)
        self.recognition_display(self.filename)

    def trans_function(self):
        self.label_canvas.setHidden(False)
        self.canvas.clear_all()
        self.label.setHidden(True)

    def capture(self):
        start_x = self.label_canvas.x() + self.dialog.geometry().x() + self.widget.x()
        start_y = self.label_canvas.y() + self.dialog.geometry().y() + self.widget.y()
        end_x = start_x + self.label_canvas.width()
        end_y = start_y + self.label_canvas.height()
        im = ImageGrab.grab((start_x, start_y, end_x, end_y))
        new_im = im.resize((600, 200), Image.ANTIALIAS).convert('L')
        # new_im = im.convert('L')
        new_im = PIL.ImageOps.invert(new_im)
        new_im.save('temporary.bmp', 'bmp')
        self.recognition_display('temporary.bmp')

        # new_im.show()

    def recognition_display(self, file_path: str):
        dm = test_module(file_path)
        trainer.test(model, datamodule=dm)
        with open('single_result.txt', 'r') as f:
            output = f.readlines()
        self.label_2.setText('公式的预测结果是：' + output[0])
        self.label_2.adjustSize()
        print_latex = '$' + output[0] + '$'
        self.print_latex = print_latex
        output_img_name = file_path.replace('.bmp', '.png')
        self.formula2img(print_latex, output_img_name)
        # print('这里正确')
        self.image = QImage(file_path)
        self.label.setPixmap(QPixmap.fromImage(self.image))
        self.label.adjustSize()
        self.label.setAlignment(Qt.AlignCenter)

        if self.error_flag:
            self.label_3.setText('此次公式识别有错误，重新来一次吧')
        else:
            self.image_print = QImage(output_img_name)
            self.label_3.setPixmap(QPixmap.fromImage(self.image_print))
        self.label_3.adjustSize()

    def formula2img(self, str_latex, out_file, img_size=(5, 3), font_size=16):
        fig = plt.figure(figsize=img_size)
        ax = fig.add_axes([0, 0, 1, 1])
        ax.get_xaxis().set_visible(False)
        ax.get_yaxis().set_visible(False)
        ax.set_xticks([])
        ax.set_yticks([])
        try:
            plt.text(0.5, 0.5, str_latex, fontsize=font_size, verticalalignment='center', horizontalalignment='center')
            plt.savefig(out_file)
        except:
            print('该公式识别有误')
            self.error_flag = True
        # plt.show()
        else:
            self.error_flag = False


    def copyText(self):
        clipboard = QApplication.clipboard()
        clipboard.setText(self.print_latex)

# cpython
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    Dialog = QtWidgets.QDialog()
    ui = Ui_Dialog()
    ui.setupUi(Dialog)

    trainer = Trainer(logger=False, gpus=1)

    model = LitBTTR.load_from_checkpoint(ckp_path)


    Dialog.show()
    sys.exit(app.exec_())
